#ifndef QTROWRAPPER_H
#define QTROWRAPPER_H

#include <QObject>
#include <QSharedPointer>
#include <QWebSocket>
#include "websocketiodevice.h"
//This file is autogenerated from qto.rep
#include "rep_qtro_replica.h"
#include "qtrohelper.hpp"

class QtroWrapper : public QObject
{
    Q_OBJECT
public:
    explicit QtroWrapper(QString peerAddress, QObject *parent = nullptr);
    ~QtroWrapper();
    const QString autodiscoveryMessage = "FastECU_PTP_Autodiscovery";
    const QString remoteObjectName = "Test1";
    const QString remoteObjectNameUtility = "Test1_Utility";
    const int heartbeatInterval = 1000;

    long someFunc(QString s)
    {return qtrohelper::slot_sync(qtro_remote->someFunc(s));}
    int get_B()
    {return qtrohelper::slot_sync(qtro_remote->get_B());}
    bool set_B(int val)
    {qtrohelper::slot_sync(qtro_remote->set_B(val));return true;}
    bool send_log_window_message(QString message)
    {
        //Send remote log message in async way
        qtro_remote_utility->send_log_window_message(message);
        return true;
    }

signals:
private:
    QString peerAddress;
    QWebSocket *webSocket;
    WebSocketIoDevice *socket_remote;
    WebSocketIoDevice *socket_remote_utility;
    QSharedPointer<QtroRemoteReplica> qtro_remote;
    QSharedPointer<QtroRemoteUtilityReplica> qtro_remote_utility;
    QRemoteObjectNode node_remote;
    QRemoteObjectNode node_remote_utility;
    void startOverNetwok(void);
    void startLocal(void);
    void sendAutoDiscoveryMessage();
};

#endif // QTROWRAPPER_H
