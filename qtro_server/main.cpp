#include <QCoreApplication>
#include <QRemoteObjectNode>
#include "QtWebSockets/QtWebSockets"
#include <iostream>
#include "websocketiodevice.h"
//This file is autogenerated from qto.rep
#include "rep_qtro_replica.h"
#include "qtrohelper.hpp"

//Helper functions
//Set remote object property 'synchronously'
//QRO is smart pointer
//TODO first check if not equal
#define SET_QRO_PROP_SYNC(QRO, QRO_PROP_NAME, QRO_PROP_VALUE) \
{QRO->push##QRO_PROP_NAME(QRO_PROP_VALUE);\
        QEventLoop e_;\
        QObject::connect(QRO.data(), &QtroRemoteReplica::QRO_PROP_NAME##Changed,\
                            &e_, &QEventLoop::quit);\
        e_.exec();}
// end SET_QRO_PROP_SYNC

//Call remote object slot synchronously
//last parameters are slot parameters
//Lambda function
#define CALL_QRO_SLOT_SYNC(FUN) [&]()->QVariant\
{\
        QVariant r;\
        QScopedPointer<QRemoteObjectPendingCallWatcher>\
        watcher{new QRemoteObjectPendingCallWatcher(FUN)};\
        QObject::connect(watcher.data(), &QRemoteObjectPendingCallWatcher::finished,\
                         watcher.data(), [&](QRemoteObjectPendingCallWatcher* watch)\
            {\
                    r = watch->returnValue();\
            }, Qt::DirectConnection);\
        watcher->waitForFinished();\
        return r;\
}()
// CALL_QRO_SLOT_SYNC

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);
    QString addr = "127.0.0.1:33314";
    if (argc == 2)
        addr = QString(argv[1]);

    std::cout << "Broker address is " << addr.toStdString() << std::endl;


    QScopedPointer<QWebSocket> webSocket{new QWebSocket};

    QSslConfiguration sslConfiguration;
    sslConfiguration.setPeerVerifyMode(QSslSocket::VerifyNone);
    webSocket->setSslConfiguration(sslConfiguration);

    //Transport for remote objects protocol
    WebSocketIoDevice socket(webSocket.data());

    //Replica node
    QRemoteObjectNode node;
    QObject::connect(webSocket.data(), &QWebSocket::connected, &node,
                     [&node, &socket]()
                     {
                        //Run client node after socket is up
                         node.addClientSideConnection(&socket);
    });
    node.setHeartbeatInterval(1000);
    //WebSocket over SSL
    webSocket->open("wss://" + addr);
    //Connect to source published with name "Test1"
    //Class QtroRemoteReplica is autogenerated from qtro.rep
    QScopedPointer<QtroRemoteReplica> qtro_remote(
        node.acquire<QtroRemoteReplica>("Test1")
    );
    //Wait for replication
    if (qtro_remote->waitForSource(10000))
    {
        qDebug() << "pushA";
        //Set property synchronously
        SET_QRO_PROP_SYNC(qtro_remote, A, "hi there");
        //How it looks with raw code
        /*qtro_remote->pushA("hi");
        QEventLoop e;
        QObject::connect(qtro_remote.data(), &QtroRemoteReplica::AChanged,
                         &e, &QEventLoop::quit);
        e.exec();*/
        qDebug() << qtro_remote->A();
        SET_QRO_PROP_SYNC(qtro_remote, A, "111");
        qDebug() << qtro_remote->A();

        qDebug() << "someFunc";
        //Do synchronous method call
        //How it looks with raw code
        /*{QScopedPointer<QRemoteObjectPendingCallWatcher>
            watcher{new QRemoteObjectPendingCallWatcher(qtro_remote->someFunc("Hello"))};
        QObject::connect(watcher.data(), &QRemoteObjectPendingCallWatcher::finished,
            watcher.data(), [&](QRemoteObjectPendingCallWatcher* watch)
            {
                retval = watch->returnValue().toLongLong();
            }, Qt::DirectConnection);
        watcher->waitForFinished();}*/
        //Oldschool - macro call
        long retval = CALL_QRO_SLOT_SYNC(qtro_remote->someFunc("hlo")).toLongLong();
        qDebug() << retval;
        //Newschool - function template
        long r = qtrohelper::slot_sync(qtro_remote->someFunc("qqq"));
        qDebug() << r;
        qDebug() << "set_B";
        qtrohelper::slot_sync(qtro_remote->set_B(321));
        qDebug() << qtrohelper::slot_sync(qtro_remote->get_B());
    }
    else
        qDebug() << "Connection to remote object failed";

    return a.exec();
}
